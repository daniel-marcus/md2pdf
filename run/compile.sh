#!/bin/bash

# Check if a filename was provided
if [ -z "$1" ]; then
  echo "Usage: $0 FILENAME (without .md)"
  exit 1
fi

FILENAME="$1"
MD_FILE="./in/$FILENAME.md"
TEX_OUT="./out/$FILENAME.tex"

# Extract the 'template' value from the YAML header or use DEFAULT_TEMPLATE
DEFAULT_TEMPLATE="letter"
TEMPLATE=$(awk '
  BEGIN { in_yaml = 0 }
  /^---/ { in_yaml = !in_yaml; next }
  in_yaml && /^template:/ {
    sub(/^template:[[:space:]]*/, "", $0)
    print $0
    exit
  }
' "$MD_FILE")
TEMPLATE=${TEMPLATE:-$DEFAULT_TEMPLATE}

TEMPLATE_FILE="./templates/$TEMPLATE.tex"
FILTER_FILE="./templates/$TEMPLATE.lua"

if [ ! -e "$TEMPLATE_FILE" ]; then
  echo "❌ Error: Template $TEMPLATE_FILE not found"
  exit 1
fi

if [ -e "$FILTER_FILE" ]; then
    TEMPLATE_FILTER_ARG="--lua-filter=$FILTER_FILE"
else
    TEMPLATE_FILTER_ARG=""
fi

if [[ "$FILENAME" == *.example ]]; then
    CONFIG_FILE="config.example.yaml"
else
    CONFIG_FILE="config.yaml"
fi

if [[ ! -f config.yaml ]]; then
  echo "config.yaml not found. Creating from config.example.yaml ..."
  cp config.example.yaml config.yaml
fi

if ! pandoc "$MD_FILE" \
  --metadata-file="./$CONFIG_FILE" \
  --template="$TEMPLATE_FILE" \
  --lua-filter=./templates/_shared.lua \
  $TEMPLATE_FILTER_ARG \
  -s -o "$TEX_OUT"; then
  echo "❌ Error: pandoc failed"
  exit 1
fi

LOGFILE=$(mktemp)  

if ! xelatex -interaction=nonstopmode -halt-on-error -output-directory=./out "$TEX_OUT" >"$LOGFILE" 2>&1; then 
  tail -n 20 "$LOGFILE"
  echo "❌ Error: xelatex failed"
  rm "$LOGFILE"
  exit 1
else 
  # Clean up auxiliary files generated by LaTeX
  latexmk -xelatex -pdf -c -outdir=./out/ "$TEX_OUT" > /dev/null 2>&1
  echo "✅ Built $FILENAME.pdf and $FILENAME.tex → /out/"
  rm "$LOGFILE"
fi